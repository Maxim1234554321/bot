#!/usr/bin/env python3

from colorama import Fore, Style, init as colorama_init
import asyncio
import aiohttp
import json
import os
import time
import logging
import re
from logging.handlers import RotatingFileHandler
from datetime import datetime, timedelta
import aiofiles
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from fpdf import FPDF
import aiofiles.os
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

colorama_init(autoreset=True)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
print(Fore.GREEN + "üçé –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∫–æ–≤ Blox Fruits üçé")
print(Fore.YELLOW + "–ê–≤—Ç–æ—Ä: @aw3keN")
print(Fore.CYAN + "–í–µ—Ä—Å–∏—è: 2.6 (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º InputFile)")
print(Fore.MAGENTA + "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ:")
print(Fore.CYAN + " ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å InputFile (–∑–∞–º–µ–Ω–∞ –Ω–∞ FSInputFile)")
print(Fore.CYAN + " ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ PDF —Å DejaVuSans –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤")
print(Fore.CYAN + " ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
print(Fore.CYAN + " ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –Ω–∞ —Å—Ç–æ–∫–∏ (fruityblox.com)")
print(Fore.GREEN + "\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n")

# üìú –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Settings:
    TOKEN = os.getenv("BOT_TOKEN", "8353992511:AAGLTI6dhxis23prl4AzLVh4Atau2jDbh_0")
    STOCK_PATH = "data/stock.json"
    USERS_PATH = "data/users.json"
    ADMINS_PATH = "data/admins.json"
    BACKUP_DIR = "data/backups"
    FONT_PATH = "data/DejaVuSans.ttf"
    URL = "https://fruityblox.com/stock"
    HEADERS = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.9",
        "Referer": "https://www.google.com/"
    }
    NORMAL_EMOJI = "üçé"
    MIRAGE_EMOJI = "üåå"
    OWNER_ID = 5890065908

# üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("BloxFruitsBot")
logger.setLevel(logging.DEBUG)
handler = RotatingFileHandler("bot.log", maxBytes=10*1024*1024, backupCount=5, encoding="utf-8")
formatter = logging.Formatter('%(asctime)s - üçé %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = Bot(token=Settings.TOKEN)
except Exception as e:
    logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {e}")
    raise SystemExit("Bot initialization failed")

dp = Dispatcher()
user_router = Router()
bot_stats = {"messages_processed": 0, "callbacks_processed": 0, "last_latency": 0.0}
current_stock = {}
file_lock = asyncio.Lock()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
class AdminStates(StatesGroup):
    waiting_for_broadcast = State()
    waiting_for_role = State()
    waiting_for_remove_role = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
async def init_data_files():
    os.makedirs("data", exist_ok=True)
    if not await aiofiles.os.path.exists(Settings.USERS_PATH):
        async with aiofiles.open(Settings.USERS_PATH, "w", encoding="utf-8") as f:
            await f.write(json.dumps({}, ensure_ascii=False, indent=2))
    if not await aiofiles.os.path.exists(Settings.ADMINS_PATH):
        admins = {str(Settings.OWNER_ID): "owner"}
        async with aiofiles.open(Settings.ADMINS_PATH, "w", encoding="utf-8") as f:
            await f.write(json.dumps(admins, ensure_ascii=False, indent=2))
    if not await aiofiles.os.path.exists(Settings.STOCK_PATH):
        async with aiofiles.open(Settings.STOCK_PATH, "w", encoding="utf-8") as f:
            await f.write(json.dumps({"normal": [], "mirage": []}, ensure_ascii=False, indent=2))

async def load_json(path, default=None):
    async with file_lock:
        if await aiofiles.os.path.exists(path):
            try:
                async with aiofiles.open(path, "r", encoding="utf-8") as f:
                    content = await f.read()
                    return json.loads(content) if content.strip() else default
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {path}: {e}")
                return default
        return default

async def save_json(path, data):
    async with file_lock:
        try:
            async with aiofiles.open(path, "w", encoding="utf-8") as f:
                await f.write(json.dumps(data, ensure_ascii=False, indent=2))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {path}: {e}")

async def update_user_stats(user: types.User):
    users = await load_json(Settings.USERS_PATH, {})
    user_id = str(user.id)
    now = datetime.now().isoformat()
    if user_id not in users:
        users[user_id] = {
            "username": user.username,
            "first_name": user.first_name,
            "join_date": now,
            "last_active": now,
            "message_count": 1
        }
    else:
        users[user_id]["last_active"] = now
        users[user_id]["message_count"] += 1
    await save_json(Settings.USERS_PATH, users)

async def get_user_role(user_id: int) -> str:
    admins = await load_json(Settings.ADMINS_PATH, {})
    return admins.get(str(user_id), None)

ROLE_PERMISSIONS = {
    "owner": ["all"],
    "admin": ["broadcast", "pdf", "ban", "view_users", "view_admins", "manual_update", "view_logs", "download_logs"],
    "moderator": ["view_users", "view_admins", "manual_update", "view_logs"]
}

def has_permission(role: str, permission: str) -> bool:
    if role == "owner":
        return True
    return permission in ROLE_PERMISSIONS.get(role, [])

class StockFileHandler(FileSystemEventHandler):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        self.last_modified = time.time()
        self.last_stock_data = {}
        self.is_updating = False
        self.update_interval = 30
        self.request_limit = 10
        self.last_request_time = 0
        self.request_count = 0
        logger.info("‚ÑπÔ∏è –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞")
        asyncio.create_task(self.periodic_update_stock())

    async def periodic_update_stock(self):
        while True:
            try:
                start_time = time.time()
                await self.update_stock()
                bot_stats["last_latency"] = time.time() - start_time
                await auto_backup()
                logger.info(f"‚úÖ –°—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.update_interval} —Å–µ–∫—É–Ω–¥")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {e}")
            await asyncio.sleep(self.update_interval)

    async def fetch_stock_data(self):
        current_time = time.time()
        if current_time - self.last_request_time >= 60:
            self.request_count = 0
            self.last_request_time = current_time
        if self.request_count >= self.request_limit:
            logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–Ω–∏–µ...")
            await asyncio.sleep(60 - (current_time - self.last_request_time))
            self.request_count = 0
            self.last_request_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(Settings.URL, headers=Settings.HEADERS, timeout=10) as response:
                    response.raise_for_status()
                    self.request_count += 1
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É")
                    text = await response.text()
                    if not text.strip():
                        logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∞–π—Ç–∞")
                        return None
                    return text
            except aiohttp.ClientError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É {Settings.URL}: {e}")
                return None
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ fetch: {e}")
                return None

    async def parse_stock_data(self, html_content):
        if not html_content:
            logger.error("‚ùå HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π")
            return {"normal": [], "mirage": []}
        
        stocks = {"normal": [], "mirage": []}
        unique_items = set()
        
        try:
            soup = BeautifulSoup(html_content, "lxml")
            stock_grids = soup.select("div.grid")
            if stock_grids:
                for grid in stock_grids:
                    items = grid.select("div.border.rounded-lg")
                    for item in items:
                        name_tag = item.find("h3")
                        type_tag = item.find("span", string=re.compile("normal|mirage", re.I))
                        
                        if name_tag:
                            name = name_tag.get_text(strip=True).lower()
                            type_text = type_tag.get_text(strip=True).lower() if type_tag else ""
                            stock_type = "normal" if "normal" in type_text else "mirage" if "mirage" in type_text else None
                            if stock_type and name not in unique_items:
                                stocks[stock_type].append(name)
                                unique_items.add(name)
                                logger.info(f"‚úÖ HTML: –ò–∑–≤–ª–µ—á–µ–Ω —Ñ—Ä—É–∫—Ç: {name}, –¢–∏–ø: {stock_type}")
            script_tags = soup.select("script")
            for script in script_tags:
                script_content = script.get_text()
                if "currentStock" in script_content:
                    try:
                        match = re.search(r'currentStock":\s*(\{.*?\})\s*}', script_content, re.DOTALL)
                        if match:
                            json_str = match.group(1)
                            json_str = json_str.replace("'", '"')
                            stock_data = json.loads(json_str)
                            for stock_type in ["normal", "mirage"]:
                                for name in stock_data.get(stock_type, []):
                                    name = name.lower()
                                    if name not in unique_items:
                                        stocks[stock_type].append(name)
                                        unique_items.add(name)
                                        logger.info(f"‚úÖ __next_f: –ò–∑–≤–ª–µ—á–µ–Ω —Ñ—Ä—É–∫—Ç: {name}, –¢–∏–ø: {stock_type}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ __next_f: {e}")
                    break
            for stock_type in ["normal", "mirage"]:
                if not stocks[stock_type]:
                    logger.info(f"‚ÑπÔ∏è {stock_type.capitalize()} —Å—Ç–æ–∫ –ø—É—Å—Ç")
                    stocks[stock_type] = []
            await save_json(Settings.STOCK_PATH, stocks)
            return stocks
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"normal": [], "mirage": []}

    async def update_stock(self):
        if self.is_updating:
            logger.info("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫...")
            return
        self.is_updating = True
        try:
            html_content = await self.fetch_stock_data()
            if html_content:
                new_stock_data = await self.parse_stock_data(html_content)
                if new_stock_data:
                    self.last_stock_data = new_stock_data
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–æ–∫–∞")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω HTML-–∫–æ–Ω—Ç–µ–Ω—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∫–∞: {e}")
        finally:
            self.is_updating = False

    def on_modified(self, event):
        if event.src_path == Settings.STOCK_PATH and not self.is_updating:
            current_time = time.time()
            if current_time - self.last_modified >= 1:
                self.last_modified = current_time
                asyncio.create_task(self.update_stock())

async def auto_backup():
    try:
        os.makedirs(Settings.BACKUP_DIR, exist_ok=True)
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = os.path.join(Settings.BACKUP_DIR, f"stock_{timestamp}.bak")
        if await aiofiles.os.path.exists(Settings.STOCK_PATH):
            async with aiofiles.open(Settings.STOCK_PATH, "r", encoding="utf-8") as src:
                content = await src.read()
            async with aiofiles.open(backup_path, "w", encoding="utf-8") as dst:
                await dst.write(content)
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text=f"{Settings.NORMAL_EMOJI} –û–±—ã—á–Ω—ã–π —Å—Ç–æ–∫"), 
         KeyboardButton(text=f"{Settings.MIRAGE_EMOJI} –ú–∏—Ä–∞–∂–Ω—ã–π —Å—Ç–æ–∫")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), 
         KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_stock_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text=f"{Settings.NORMAL_EMOJI} –û–±—ã—á–Ω—ã–π —Å—Ç–æ–∫"), 
         KeyboardButton(text=f"{Settings.MIRAGE_EMOJI} –ú–∏—Ä–∞–∂–Ω—ã–π —Å—Ç–æ–∫")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), 
         KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")],
        [KeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å PDF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")],
        [KeyboardButton(text="üëë –í—ã–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ ID")],
        [KeyboardButton(text="üö´ –£–±—Ä–∞—Ç—å —Ä–æ–ª—å/–±–∞–Ω")],
        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")],
        [KeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
        [KeyboardButton(text="üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞")],
        [KeyboardButton(text="üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"), 
         KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏")],
        [KeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)

async def get_stock(stock_type: str) -> str:
    try:
        stock_data = await load_json(Settings.STOCK_PATH, {"normal": [], "mirage": []})
        items = stock_data.get(stock_type, [])
        emoji = Settings.NORMAL_EMOJI if stock_type == "normal" else Settings.MIRAGE_EMOJI
        text = f"{emoji} <b>{'–û–±—ã—á–Ω—ã–π —Å—Ç–æ–∫' if stock_type == 'normal' else '–ú–∏—Ä–∞–∂–Ω—ã–π —Å—Ç–æ–∫'}</b>\n"
        if items:
            for item in items:
                if isinstance(item, str):
                    text += f"   ‚Ä¢ {item.capitalize()}\n"
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–æ–∫–∞: {item}")
        else:
            text += "   –°—Ç–æ–∫ –ø—É—Å—Ç\n"
        text += "\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫: fruityblox.com</i>\n"
        logger.info(f"‚ÑπÔ∏è –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å—Ç–æ–∫–∞ {stock_type}")
        return text
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∫–∞ {stock_type}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"

def clean_text_for_pdf(text: str) -> str:
    """–£–¥–∞–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è PDF"""
    emoji_pattern = re.compile(
        "["
        u"\U0001F600-\U0001F64F"  # —Å–º–∞–π–ª–∏–∫–∏
        u"\U0001F300-\U0001F5FF"  # —Å–∏–º–≤–æ–ª—ã –∏ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã
        u"\U0001F680-\U0001F6FF"  # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ —Å–∏–º–≤–æ–ª—ã
        u"\U0001F1E0-\U0001F1FF"  # —Ñ–ª–∞–≥–∏
        u"\U00002702-\U000027B0"
        u"\U000024C2-\U0001F251"
        "]+", flags=re.UNICODE
    )
    return emoji_pattern.sub(r'', text)

def generate_stats_pdf(users: dict, bot_stats: dict) -> str:
    try:
        pdf = FPDF()
        pdf.add_page()
        if os.path.exists(Settings.FONT_PATH):
            pdf.add_font("DejaVu", "", Settings.FONT_PATH, uni=True)
            pdf.set_font("DejaVu", "", 12)
        else:
            pdf.set_font("Arial", "", 12)
            logger.warning("‚ö†Ô∏è –®—Ä–∏—Ñ—Ç DejaVuSans –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Arial")

        pdf.set_text_color(150, 150, 150)
        pdf.set_font("DejaVu" if os.path.exists(Settings.FONT_PATH) else "Arial", "", 8)
        pdf.cell(200, 10, txt=clean_text_for_pdf("–ò—Å—Ç–æ—á–Ω–∏–∫: fruityblox.com"), ln=1, align="C")
        pdf.set_text_color(0, 0, 0)
        pdf.set_font("DejaVu" if os.path.exists(Settings.FONT_PATH) else "Arial", "", 12)

        title = clean_text_for_pdf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ Blox Fruits")
        pdf.cell(200, 10, txt=title, ln=1, align="C")
        
        total_users = len(users)
        active_last_day = sum(1 for u in users.values() if datetime.fromisoformat(u["last_active"]) > datetime.now() - timedelta(days=1))
        total_messages = sum(u["message_count"] for u in users.values())
        avg_messages = total_messages / total_users if total_users else 0
        
        pdf.cell(200, 10, txt=clean_text_for_pdf(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"), ln=1)
        pdf.cell(200, 10, txt=clean_text_for_pdf(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: {active_last_day}"), ln=1)
        pdf.cell(200, 10, txt=clean_text_for_pdf(f"–û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}"), ln=1)
        pdf.cell(200, 10, txt=clean_text_for_pdf(f"–°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {avg_messages:.2f}"), ln=1)
        pdf.cell(200, 10, txt=clean_text_for_pdf(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {bot_stats['messages_processed']}"), ln=1)
        pdf.cell(200, 10, txt=clean_text_for_pdf(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: {bot_stats['last_latency']:.2f} —Å–µ–∫"), ln=1)
        
        pdf_path = "data/stats.pdf"
        pdf.output(pdf_path)
        logger.info(f"‚úÖ PDF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω: {pdf_path}")
        return pdf_path
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        return None

async def broadcast_message(text: str):
    users = await load_json(Settings.USERS_PATH, {})
    success_count = 0
    for user_id in users:
        try:
            await bot.send_message(int(user_id), text, parse_mode="HTML")
            success_count += 1
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(users)}")
    return success_count

@user_router.message(Command("start"))
async def cmd_start(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–∫–∞ Blox Fruit!",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@user_router.message(Command("contacts"))
async def cmd_contacts(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /contacts")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –ø–æ—Ö–æ–∂–µ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞? –ü–∏—à–∏ –º–Ω–µ: @GentlemaNi78 –∏–ª–∏ –∂–µ –∑–∞—Ö–æ–¥–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –º–µ–Ω—è —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏: https://t.me/gruppaUwU4w2",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

@user_router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    role = await get_user_role(message.from_user.id)
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, —Ä–æ–ª—å: {role}")
    if role:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_keyboard(), parse_mode="HTML")
    else:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(lambda message: message.text == f"{Settings.NORMAL_EMOJI} –û–±—ã—á–Ω—ã–π —Å—Ç–æ–∫")
async def view_normal_stock(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±—ã—á–Ω—ã–π —Å—Ç–æ–∫")
    text = await get_stock("normal")
    await message.answer(text, reply_markup=get_stock_keyboard(), parse_mode="HTML")

@user_router.message(lambda message: message.text == f"{Settings.MIRAGE_EMOJI} –ú–∏—Ä–∞–∂–Ω—ã–π —Å—Ç–æ–∫")
async def view_mirage_stock(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –º–∏—Ä–∞–∂–Ω—ã–π —Å—Ç–æ–∫")
    text = await get_stock("mirage")
    await message.answer(text, reply_markup=get_stock_keyboard(), parse_mode="HTML")

@user_router.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def view_contacts(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç—ã")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –ø–æ—Ö–æ–∂–µ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–¥–µ—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞? –ü–∏—à–∏ –º–Ω–µ: @GentlemaNi78 –∏–ª–∏ –∂–µ –∑–∞—Ö–æ–¥–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –º–µ–Ω—è —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏: https://t.me/gruppaUwU4w2",
        reply_markup=get_stock_keyboard(),
        parse_mode="HTML"
    )

@user_router.message(lambda message: message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def view_bot_info(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
    bot_info = (
        "<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n"
        "‚Ä¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> –°—Ç–æ–∫ –ë–æ—Ç Blox Fruit\n"
        "‚Ä¢ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> @aw3keN\n"
        "‚Ä¢ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> @GentlemaNi78\n"
        "‚Ä¢ <b>–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b> Python\n"
        "‚Ä¢ <b>–í–µ—Ä—Å–∏—è:</b> 2.6\n"
        "‚Ä¢ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–∫–æ–≤ Blox Fruits\n"
        "‚Ä¢ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> @GentlemaNi78 –∏–ª–∏ https://t.me/gruppaUwU4w2"
    )
    await message.answer(bot_info, reply_markup=get_main_keyboard(), parse_mode="HTML")

@user_router.message(lambda message: message.text == "‚¨Ö –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ü–µ–ª—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–æ–∫–∞ Blox Fruit!",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

# –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Å FSM
@user_router.message(lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
async def admin_broadcast(message: types.Message, state: FSMContext):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "broadcast"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_for_broadcast)
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(message: types.Message, state: FSMContext):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "broadcast"):
        success_count = await broadcast_message(message.text)
        await message.answer(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=get_admin_keyboard())
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {message.text[:50]}...")
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±–µ–∑ –ø—Ä–∞–≤")
        await state.clear()

@user_router.message(lambda message: message.text == "üìä –ü–æ–ª—É—á–∏—Ç—å PDF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
async def admin_pdf(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "pdf"):
        users = await load_json(Settings.USERS_PATH, {})
        pdf_path = generate_stats_pdf(users, bot_stats)
        if pdf_path and os.path.exists(pdf_path):
            try:
                await message.answer_document(FSInputFile(pdf_path), caption="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ PDF", reply_markup=get_admin_keyboard())
                os.remove(pdf_path)
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª PDF —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF.", reply_markup=get_admin_keyboard())
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF: {e}")
                if os.path.exists(pdf_path):
                    os.remove(pdf_path)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF.", reply_markup=get_admin_keyboard())
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å PDF –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å PDF –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(lambda message: message.text == "üëë –í—ã–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ ID")
async def admin_assign_role(message: types.Message, state: FSMContext):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "all"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ TG ID –∏ —Ä–æ–ª—å (owner/admin/moderator): —Ñ–æ—Ä–º–∞—Ç 'ID role'", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_for_role)
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(AdminStates.waiting_for_role)
async def process_assign_role(message: types.Message, state: FSMContext):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "all"):
        try:
            user_id, new_role = message.text.split()
            user_id = user_id.strip()
            new_role = new_role.strip().lower()
            if new_role not in ["owner", "admin", "moderator"]:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: owner, admin, moderator", reply_markup=get_admin_keyboard())
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—É—é —Ä–æ–ª—å: {new_role}")
                await state.clear()
                return
            admins = await load_json(Settings.ADMINS_PATH, {})
            admins[user_id] = new_role
            await save_json(Settings.ADMINS_PATH, admins)
            await message.answer(f"‚úÖ –†–æ–ª—å {new_role} –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", reply_markup=get_admin_keyboard())
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–¥–∞–ª —Ä–æ–ª—å {new_role} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await state.clear()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 'ID role'", reply_markup=get_admin_keyboard())
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏: {message.text}")
            await state.clear()
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å –±–µ–∑ –ø—Ä–∞–≤")
        await state.clear()

@user_router.message(lambda message: message.text == "üö´ –£–±—Ä–∞—Ç—å —Ä–æ–ª—å/–±–∞–Ω")
async def admin_remove_role(message: types.Message, state: FSMContext):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "ban"):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ TG ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏/–±–∞–Ω–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AdminStates.waiting_for_remove_role)
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —É–±—Ä–∞—Ç—å —Ä–æ–ª—å –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(AdminStates.waiting_for_remove_role)
async def process_remove_role(message: types.Message, state: FSMContext):
    await update_user_stats(message.from_user)
    bot_stats["messages_processed"] += 1
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "ban"):
        try:
            user_id = message.text.strip()
            admins = await load_json(Settings.ADMINS_PATH, {})
            if user_id in admins:
                del admins[user_id]
                await save_json(Settings.ADMINS_PATH, admins)
                await message.answer(f"‚úÖ –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", reply_markup=get_admin_keyboard())
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–¥–∞–ª–∏–ª —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏", reply_markup=get_admin_keyboard())
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å —É {user_id}")
            await state.clear()
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.", reply_markup=get_admin_keyboard())
            logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å: {e}")
            await state.clear()
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –±–µ–∑ –ø—Ä–∞–≤")
        await state.clear()

@user_router.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
async def admin_view_admins(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "view_admins"):
        admins = await load_json(Settings.ADMINS_PATH, {})
        text = "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n" + "\n".join(f"{uid}: {r}" for uid, r in admins.items())
        await message.answer(text, reply_markup=get_admin_keyboard())
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(lambda message: message.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_view_users(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "view_users"):
        users = await load_json(Settings.USERS_PATH, {})
        total = len(users)
        active = sum(1 for u in users.values() if datetime.fromisoformat(u["last_active"]) > datetime.now() - timedelta(days=1))
        text = f"–í—Å–µ–≥–æ: {total}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}"
        await message.answer(text, reply_markup=get_admin_keyboard())
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(lambda message: message.text == "üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞")
async def admin_manual_update(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "manual_update"):
        stock_handler = StockFileHandler(bot)
        await stock_handler.update_stock()
        await message.answer("‚úÖ –°—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_admin_keyboard())
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∫ –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(lambda message: message.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
async def admin_view_logs(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "view_logs"):
        if os.path.exists("bot.log"):
            with open("bot.log", "r", encoding="utf-8") as f:
                logs = f.read()[-2000:]
            await message.answer(logs, reply_markup=get_admin_keyboard())
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ª–æ–≥–∏")
        else:
            await message.answer("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_keyboard())
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –±–µ–∑ –ø—Ä–∞–≤")

@user_router.message(lambda message: message.text == "üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏")
async def admin_download_logs(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if has_permission(role, "download_logs"):
        log_file = "bot.log"
        if os.path.exists(log_file):
            try:
                await message.answer_document(FSInputFile(log_file), caption="–§–∞–π–ª –ª–æ–≥–æ–≤", reply_markup=get_admin_keyboard())
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª –ª–æ–≥–æ–≤")
            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.", reply_markup=get_admin_keyboard())
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–∏: {e}")
        else:
            await message.answer("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —Å–∫–∞—á–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤")
    else:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.", reply_markup=get_admin_keyboard())
        logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ –±–µ–∑ –ø—Ä–∞–≤")

async def main():
    try:
        if not Settings.TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
            raise ValueError("Bot token is not set")
        await init_data_files()
        logger.info("üìÅ –î–∞–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        dp.include_router(user_router)
        observer = Observer()
        stock_handler = StockFileHandler(bot)
        observer.schedule(stock_handler, path="data", recursive=False)
        observer.start()
        logger.info("‚ÑπÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ñ–∞–π–ª–∞–º–∏ –∑–∞–ø—É—â–µ–Ω")
        try:
            await dp.start_polling(bot)
        finally:
            observer.stop()
            observer.join()
            logger.info("‚ÑπÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ñ–∞–π–ª–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            await bot.session.close()
            logger.info("‚ÑπÔ∏è –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())